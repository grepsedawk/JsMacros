plugins {
    id "xyz.wagyourtail.unimined" version "0.3.6" apply false
}

subprojects {
    apply plugin: "xyz.wagyourtail.unimined"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    java {
        withSourcesJar()
    }

    configurations {
        coreImplementation {
            extendsFrom implementation
        }
        jsmacrosExtensionInclude
    }

    minecraft {
        version = "1.8.9-11.15.1.1722"
        runDir = "run"

        mappings = Tiny2MCP.remap(new File(rootProject.rootDir, "libs"), "1.8.9", "build.202110221052")
    }

    configurations {
        include
        include.transitive = false
    }
    sourceSets {
        main {
            compileClasspath += configurations.coreImplementation + configurations.jsmacrosExtensionInclude
            runtimeClasspath += configurations.coreImplementation + configurations.jsmacrosExtensionInclude
        }
    }

    repositories {
        maven {
            url 'https://maven.fabricmc.net/'
        }
        maven {
            name = "legacy-fabric"
            url = "https://maven.legacyfabric.net"
        }
        maven {
            name "modmenu repository"
            url 'https://maven.terraformersmc.com/releases/'
        }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.spongepowered.org/maven' }
        mavenCentral()

    }

    dependencies {
        minecraft "net.minecraft:minecraft:${rootProject.minecraft_version}"

        mappings "net.fabricmc:intermediary:${rootProject.minecraft_version}:v2"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

        // non-mod dependencies:
        implementation "io.noties:prism4j:${project.prism_version}"

        coreImplementation "org.jooq:joor:0.9.14"
        coreImplementation "com.neovisionaries:nv-websocket-client:2.10"
        coreImplementation "org.javassist:javassist:3.28.0-GA"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        def version = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release = version
        }
    }

    jar {

        def files = []
        def jsons = []

        eachFile {
            files.add(it)
        }

        filesMatching("**/*.mixins.json") {
            def json = new groovy.json.JsonSlurper().parse(it.open())
            jsons.add(json)
        }

        doLast {
            def pkgs = new ArrayList()
            def client = new ArrayList()
            def server = new ArrayList()
            def mixins = new ArrayList()
            jsons.forEach({
                def pkg = it.package
                pkgs.add(pkg.replace(".", "/"))
                def cl = it.client
                if (cl != null) {
                    cl.forEach({
                        client.add((pkg + "." + it).replace(".", "/"))
                    })
                }
                def sl = it.server
                if (sl != null) {
                    sl.forEach({
                        server.add((pkg + "." + it).replace(".", "/"))
                    })
                }
                def ml = it.mixins
                if (ml != null) {
                    ml.forEach({
                        mixins.add((pkg + "." + it).replace(".", "/"))
                    })
                }
            })
            files.forEach({
                def name = it.relativePath.toString()
                for (def cl in client) {
                    if (name.endsWith(cl + ".class")) {
                        return
                    }
                }
                for (def sl in server) {
                    if (name.endsWith(sl + ".class")) {
                        return
                    }
                }
                for (def ml in mixins) {
                    if (name.endsWith(ml + ".class")) {
                        return
                    }
                }
                for (def pkg in pkgs) {
                    if (name.contains(pkg + "/") && name.endsWith(".class")) {
                        System.err.println("File " + name + " is not in a mixin json")
                    }
                }
            })
        }
    }

    task removeDist(type: Delete) {
        delete new File(rootProject.rootDir, "dist")
    }

    clean.finalizedBy(removeDist)
}