sourceSets {
    core {
        configurations.coreImplementation.setCanBeResolved(true)
        compileClasspath += configurations.coreImplementation + configurations.forgeGradleMcDeps
        runtimeClasspath += configurations.coreImplementation + configurations.forgeGradleMcDeps
    }
    main {
        compileClasspath += core.output
        runtimeClasspath += core.output
    }
}
mixin {
    add sourceSets.main, "jsmacros-common.refmap.json"
    defaultObfuscationEnv searge
}

minecraft {
    runs.off = true

    combinedSourceSets = [sourceSets.main]

    mcRemapper.tinyRemapperConf = {
        ignoreFieldDesc(true)
        ignoreConflicts(true)
    }
}

repositories {
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    implementation "org.spongepowered:mixin:0.8.5"
    implementation "org.ow2.asm:asm:9.3"
}

jar {
    classifier "dev"
    from sourceSets.main.output, sourceSets.core.output

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

remapJar {
    targetNamespace = "named"
    fallbackTargetNamespace = "intermediary"
}

task generatePyDoc(type: Javadoc) {
    group = "documentation"
    description = "Generates the python documentation for the project"
    source = sourceSets.main.allJava + sourceSets.core.allJava
    doFirst {
        classpath = sourceSets.main.compileClasspath
    }
    destinationDir = new File(rootProject.buildDir, "docs/python/JsMacrosAC/")
    options.doclet = "xyz.wagyourtail.doclet.pydoclet.Main"
    options.docletpath new File(rootProject.rootDir, "buildSrc/build/libs/buildSrc.jar")
    options.addStringOption "v", version
}

task copyPyDoc(type: Copy, dependsOn: generatePyDoc) {
    group = "documentation"
    description = "Copies the python documentation to the build folder"
    from new File(rootProject.rootDir, "docs/python")
    into new File(rootProject.buildDir, "docs/python")
}

task generateTSDoc(type: Javadoc) {
    group = "documentation"
    description = "Generates the typescript documentation for the project"
    source = sourceSets.main.allJava + sourceSets.core.allJava
    doFirst {
        classpath = sourceSets.main.compileClasspath
    }
    destinationDir = new File(rootProject.buildDir, "docs/typescript/headers/")
    options.doclet = "xyz.wagyourtail.doclet.tsdoclet.Main"
    options.docletpath new File(rootProject.rootDir, "buildSrc/build/libs/buildSrc.jar")
    options.addStringOption "v", version
}

task copyTSEnv(type: Copy, dependsOn: generateTSDoc) {
    group = "documentation"
    description = "Copies the typescript files to the build folder"
    from new File(rootProject.rootDir, "docs/typescript")
    into new File(rootProject.buildDir, "docs/typescript")
}

task generateWebDoc(type: Javadoc) {
    group = "documentation"
    description = "Generates the web documentation for the project"
    source = sourceSets.main.allJava + sourceSets.core.allJava
    doFirst {
        classpath = sourceSets.main.compileClasspath
    }
    destinationDir = new File(rootProject.buildDir, "docs/web/")
    options.doclet = "xyz.wagyourtail.doclet.webdoclet.Main"
    options.docletpath new File(rootProject.rootDir, "buildSrc/build/libs/buildSrc.jar")
    options.addStringOption "v", version
    options.addStringOption "mcv", rootProject.minecraft_version
    options {
        links 'https://docs.oracle.com/javase/8/docs/api/', 'https://www.javadoc.io/doc/org.slf4j/slf4j-api/1.7.30/', 'https://javadoc.io/doc/com.neovisionaries/nv-websocket-client/latest/'
    }
}

task copyWebDoc(type: Copy, dependsOn: generateWebDoc) {
    group = "documentation"
    description = "Copies the web documentation to the build folder"
    from new File(rootProject.rootDir, "docs/web")
    into new File(rootProject.buildDir, "docs/web")
}

task createDist(type: Copy) {
    group = "build"
    description = "Creates all files for the distribution of the project"
    dependsOn copyPyDoc, copyTSEnv, copyWebDoc
    from(new File(rootProject.buildDir, "docs"))
    into new File(rootProject.rootDir, "dist")
}

build.finalizedBy(createDist)