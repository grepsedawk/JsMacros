plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = archivesBaseName + "-FABRIC"

minecraft {
    fabric()

    mcRemapper.tinyRemapperConf = {
        ignoreFieldDesc(true)
        ignoreConflicts(true)
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
}

dependencies {
    fabric "net.fabricmc:fabric-loader:${rootProject.loader_version}"

    modImplementation fabricApi.module("fabric-api-base",  project.fapi_version)
    modImplementation fabricApi.module("fabric-lifecycle-events-v1",  project.fapi_version)
    modImplementation fabricApi.module("fabric-key-binding-api-v1",  project.fapi_version)
    modImplementation fabricApi.module("fabric-resource-loader-v0",  project.fapi_version)

    include fabricApi.module("fabric-api-base",  project.fapi_version)
    include fabricApi.module("fabric-lifecycle-events-v1",  project.fapi_version)
    include fabricApi.module("fabric-key-binding-api-v1",  project.fapi_version)
    include fabricApi.module("fabric-resource-loader-v0",  project.fapi_version)

    localRuntime "org.graalvm.sdk:graal-sdk:${project.graal_version}"
    localRuntime "org.graalvm.js:js:${project.graal_version}"
    localRuntime "org.graalvm.truffle:truffle-api:${project.graal_version}"
    localRuntime "org.graalvm.regex:regex:${project.graal_version}"
//		localRuntime "org.graalvm.compiler:compiler:${project.graal_version}"
//		localRuntime "org.graalvm.compiler:compiler-management:${project.graal_version}"

    include 'com.ibm.icu:icu4j:70.1'
    include "io.noties:prism4j:${project.prism_version}"
    include "com.neovisionaries:nv-websocket-client:2.10"
    include "org.javassist:javassist:3.28.0-GA"
    include "org.jooq:joor:0.9.14"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    //for modmenu
    modImplementation fabricApi.module("fabric-screen-api-v1",  project.fapi_version)

    for (sourceSet in project(":common").sourceSets) {
        if (sourceSet == project(":common").sourceSets.test) continue
        common sourceSet.output
        shadowCommon sourceSet.output
    }

    implementation project(":javascript_extension").sourceSets.main.output
    jsmacrosExtensionInclude(project(":javascript_extension")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching("jsmacros.extension.json") {
        expand "dependencies": configurations.jsmacrosExtensionInclude.files.collect { it.name }.join(" ")
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null

    from (configurations.jsmacrosExtensionInclude.files) {
        include '*'
        into "META-INF/jsmacrosdeps"
    }
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

task createDist(type: Copy) {
    from(new File(project.buildDir, "libs"))
    into new File(rootProject.rootDir, "dist")
}

build.finalizedBy(createDist)
