import org.objectweb.asm.ClassReader
import org.objectweb.asm.util.CheckClassAdapter
import java.nio.file.Files

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = archivesBaseName + "-FORGE"

configurations {
    common
    shadow
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    include
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
}

minecraft {
    forge {
        mixinConfig = ["jsmacros-forge.mixins.json", "jsmacros.mixins.json"]
        devFallbackNamespace = "intermediary"
    }

    mcRemapper.tinyRemapperConf = {
        ignoreFieldDesc(true)
        ignoreConflicts(true)
    }

//    mcRemapper.afterRemap = {
//        ClassReader reader = new ClassReader(Files.newInputStream(getPath("/net/minecraft/entity/mob/MobEntity.class")))
//        CheckClassAdapter.verify(reader, false, new PrintWriter(System.out))
//        System.out.println("Verified!")
//    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    localRuntime "org.graalvm.sdk:graal-sdk:${project.graal_version}"
    localRuntime "org.graalvm.js:js:${project.graal_version}"
    localRuntime "org.graalvm.truffle:truffle-api:${project.graal_version}"
    localRuntime "org.graalvm.regex:regex:${project.graal_version}"
//		localRuntime "org.graalvm.compiler:compiler:${project.graal_version}"
//		localRuntime "org.graalvm.compiler:compiler-management:${project.graal_version}"

    shadowCommon "io.noties:prism4j:${project.prism_version}", {
        exclude module: "annotations-java5"
    }
    shadowCommon "com.neovisionaries:nv-websocket-client:2.10"
    shadowCommon "org.javassist:javassist:3.28.0-GA"
    shadowCommon "org.jooq:joor:0.9.14"

    for (sourceSet in project(":common").sourceSets) {
        if (sourceSet == project(":common").sourceSets.test) continue
        common sourceSet.output
        shadowCommon sourceSet.output
    }

    implementation project(":javascript_extension").sourceSets.main.output
    jsmacrosExtensionInclude(project(":javascript_extension")) { transitive = false }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"

    // exclude icu that's "accidentally" (I hope) included in graaljs jar
    exclude "com/ibm/**"
    exclude "META-INF/**.SF"
    exclude "META-INF/**.RSA"
    exclude "META-INF/**.DSA"

    mergeServiceFiles()
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null

    from (configurations.jsmacrosExtensionInclude.files) {
        include '*'
        into "META-INF/jsmacrosdeps"
    }

    remapThroughOfficial = true
}

jar {
    manifest {
        attributes([
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'FMLCorePlugin': 'xyz.wagyourtail.jsmacros.forge.client.JsMacrosEarlyRiser',
                'JsMacrosDeps': configurations.include.files.collect { it.name }.join(" "),
                'FMLCorePluginContainsFMLMod': true,
                'ForceLoadAsMod': true
        ])
    }

    from(configurations.include.files) {
        include '*'
        into 'META-INF/jars/'
    }

    from (configurations.jsmacrosExtensionInclude.files) {
        include '*'
        into "META-INF/jsmacrosdeps"
    }

    from {
        configurations.shadow.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from {
        configurations.shadowCommon.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task createDist(type: Copy) {
    from(new File(project.buildDir, "libs"))
    into new File(rootProject.rootDir, "dist")
}

build.finalizedBy(createDist)