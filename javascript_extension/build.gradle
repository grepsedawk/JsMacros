archivesBaseName = archivesBaseName + "-js-extension"

minecraft {
    runs.off = true
}

configurations {
    common
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
}

dependencies {
    implementation "org.graalvm.sdk:graal-sdk:${project.graal_version}"
    implementation "org.graalvm.js:js:${project.graal_version}"
    implementation "org.graalvm.truffle:truffle-api:${project.graal_version}"
    implementation "org.graalvm.regex:regex:${project.graal_version}"
//		implementation "org.graalvm.compiler:compiler:${project.graal_version}"
//		implementation "org.graalvm.compiler:compiler-management:${project.graal_version}"


    jsmacrosExtensionInclude "org.graalvm.sdk:graal-sdk:${project.graal_version}"
    jsmacrosExtensionInclude "org.graalvm.js:js:${project.graal_version}"
    jsmacrosExtensionInclude "org.graalvm.truffle:truffle-api:${project.graal_version}"
    jsmacrosExtensionInclude "org.graalvm.regex:regex:${project.graal_version}"
//		jsmacrosExtensionInclude "org.graalvm.compiler:compiler:${project.graal_version}"
//		jsmacrosExtensionInclude "org.graalvm.compiler:compiler-management:${project.graal_version}"

    implementation(project(":common").sourceSets.core.output)

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}

processResources {
    filesMatching("jsmacros.ext.graal.json") {
        expand "dependencies": configurations.jsmacrosExtensionInclude.files.collect { it.name }.join(" ")
    }
}

jar {
    from (configurations.jsmacrosExtensionInclude.files) {
        include '*'
        into "META-INF/jsmacrosdeps"
    }
}

test {
    useJUnitPlatform()
}

remapJar {
    targetNamespace = "named"
    fallbackTargetNamespace = "intermediary"
}